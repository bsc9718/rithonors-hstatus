<?php
// hnotesystem.module
// Created 1/8/13 by Ryan Rule-Hoffman

/**
* Replace all comments if you would like. Be sure to identify params, files and returns in your comments
*/

/**
* Your module will use the subject as the main title and load the content from your function
*/
function hnotesystem_block($op='list', $delta=0, $edit=array())
{
	switch ($op) {
	case 'list':
	$blocks[0]['info'] = t('hNoteSystem');
	return $blocks;
	case 'view':
	$blocks['subject'] = t('hNoteSystem');
	$blocks['content'] = hnotesystem_block_content();
	return $blocks;
	}
}

/**
* Your module should generate it's content here. This will be displayed within your module
*/
function hnotesystem_block_content()
{
	$content .= "Replace with your logic";
	return $content;
}

/**
* This will allow you to restrict certain actions of the module to certain roles
*/
function hnotesystem_perm()
{
	return array('access hnotesystem','administer hnotesystem');
}

/**
* This will provide users with more information about your module
*/
function hnotesystem_hook_help($path, $arg)
{
	switch($path) {
	case 'admin/help#hnotesystem':
		$output = t('Help Content Goes Here');
	return $output;
	}
}

/**
* This will create an admin menu
*/
function hnotesystem_menu()
{
	// This is all the admin stuff from the skeleton.
	$items = array ();
	$items['admin/settings/hnotesystem'] = array (
		'title' => t('hNoteSystem'),
		'description' => t('Replace with admin setting description'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('hnotesystem_settings'),
		'access arguments' => array('administer hnotesystem'),
		'type' => MENU_NORMAL_ITEM,
	);
	
	// Now lets add the actual form that Reggie wants!
	$items['hnotesystem/form'] = array(
		'title' => t('hNoteSystem Form'), 
		'page callback' => 'hnotesystem_display_form',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('access hnotesystem'),
	
	);
		
	return $items;
}

/**
* This will construct the form used within the admin menu
*/
function hnotesystem_settings()
{
	$form['hnotesystem_general_settings'] = array(
		'#title' => t('General Settings'),
		'#type' => "fieldset",
		'#collapsible' => TRUE,
	);
	$form['hnotesystem_general_settings']['text'] = array(
		'#title' => t('Text'),
		'#type' => "fieldset",
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	$form['hnotesystem_general_settings']['text']['sample'] = array(
		'#title' => t('Sample'),
		'#type' => "textfield",
		'#size' => 45,
		'#maxlength' => 50,
		'#required' => FALSE,
		'#description' => t('Sample textfield and settings menu'),
		'#default_value' => variable_get('sample','Sample Text'),
	);
	return system_settings_form($form);
}


/**
* Custom functions
*/

/**
* This will display the form to create/edit/delete a note.
*/
function hnotesystem_display_form($action = "", $param = "")
{
	if ($action == "")
	{
		
	}
	else if ($action == "list") // List all the notes for a username
	{
	}
	// All other actions use param as the note ID
	else if ($action == "create")
	{
		return drupal_get_form('hnotesystem_create_note_form', $param);
	}
	else if ($action == "edit")
	{
		return drupal_get_form('hnotesystem_edit_note_form', $param);
	}
	else if ($action == "delete")
	{
		return drupal_get_form('hnotesystem_delete_note_form', $param);
	}
	$content = "";
	$content .= "<a href=".url('hnotesystem/form/create').">Create Note</a><br />";
	$content .= "<a href=".url('hnotesystem/form/edit').">Edit Note</a><br />";
	$content .= "<a href=".url('hnotesystem/form/delete').">Delete Note</a><br />";
	//$content .= "Action: ".$action." Param: ".$param;
	return $content;
}

/**
* This function will generate a form given the type needed.
*/
function _hnotesystem_gen_form($type, $idOrName)
{
	//drupal_set_message(t('Param: '.print_r($idOrName, true)));
	if (($type == "delete" || $type == "edit") && !is_numeric($idOrName))
	{
		$form['note_id'] = array(
			'#type' => 'textfield',
			'#title' => t('Note ID'),
			'#required' => TRUE, 
		);
	}
	else
	{
		if ($type == "delete")
		{
			// Nothing to put here after deleting a note!
		}
		else
		{
			// Fields that the user must fill out
			if ($type == "create")
			{
				$form['username'] = array(
					'#type' => 'textfield',
					'#title' => t('Username'),
					'#required' => TRUE, 
				);
			}
			$form['title'] = array(
				'#type' => 'textfield',
				'#title' => t('Title'),
				'#required' => TRUE, 
			);
			$form['body'] = array(
				'#type' => 'textarea',
				'#title' => t('Note Body'),
				'#required' => TRUE, 
			);
			
			// Should these fields be auto-generated?
			$form['date'] = array(
				'#type' => 'date',
				'#title' => t('Date'),
				'#required' => TRUE, 
			);
			$form['author'] = array(
				'#type' => 'textfield',
				'#title' => t('Author'),
				'#required' => TRUE, 
			);
		}
		
		// What is cont_id?
		
		
	}
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Submit',
	);
	
	return $form;
}

/**
* Converts a submitted form into a note.
*/
function _hnotesystem_form_to_note($form)
{
	$note = array();
	if (isset($form['username']['#post']['username']))
		$note['username'] = $form['username']['#post']['username'];
	$note['title'] = $form['title']['#post']['title'];
	$note['body'] = $form['body']['#post']['body'];
	$note['date'] = $form['date']['#post']['date'];
	$note['author'] = $form['username']['#post']['username'];
	return $note;
}

/**
* Form builder for the create form.
*/
function hnotesystem_create_note_form(&$form_state, $param = "")
{
	return _hnotesystem_gen_form("create", $param);
}

/**
* Submit handler for the create form.
*/
function hnotesystem_create_note_form_submit($form, &$form_state)
{
	drupal_set_message(t('The create form has been submitted.'));
	$note = _hnotesystem_form_to_note($form);
	// $note['id'] is left blank so a new note is created.
	hdata_save_note($note, $note['username']);
}

/**
* Form builder for the edit form.
*/
function hnotesystem_edit_note_form(&$form_state, $param = "")
{
	$form_state['storage']['note_id'] = $param;
	return _hnotesystem_gen_form("edit", $param);
}

/**
* Submit handler for the edit form.
*/
function hnotesystem_edit_note_form_submit($form, &$form_state)
{
	$note_id = $form['note_id']['#post']['note_id'];
	if (is_numeric($note_id))
	{
		drupal_goto('hnotesystem/form/edit/'.$note_id);
	}
	else
	{
		drupal_set_message(t('The edit form has been submitted.'));
		$note = _hnotesystem_form_to_note($form);
		$node['id'] = $form_state['storage']['note_id'];
		hdata_save_note($note, $note['username']);
	}
}

/**
* Form builder for the delete form.
*/
function hnotesystem_delete_note_form(&$form_state, $param = "")
{
	return _hnotesystem_gen_form("delete", $param);
}

/**
* Submit handler for the delete form.
*/
function hnotesystem_delete_note_form_submit($form, &$form_state)
{
	drupal_set_message(t('The delete form has been submitted.'));
}