<?php

/**
 * @file hvite.module
 * 
 * This file must be located in the hvite folder and is loaded on every
 * page.
 */

function hvite_menu()
{
	/* Event creation page */
	$items['hvite/createevent'] = array(
		'type' => MENU_CALLBACK,
		'title' => 'hVite Event Creation Test Form',
		'page arguments' => array(1),
		'page callback' => 'hvite_createevent_page',
		'access arguments' => array(1),
		'access callback' => 'hvite_access',
	);
	
	/* Event list page */
	$items['hvite/eventlist'] = array(
		'type' => MENU_CALLBACK,
		'title' => 'My Events',
		'page arguments' => array(1),
		'page callback' => 'hvite_eventlist_page',
		'access arguments' => array(1),
		'access callback' => 'hvite_access',
	);
	
	/* Event RSVP page */
	$items['hvite/eventrsvp'] = array(
		'type' => MENU_CALLBACK,
		'title' => '',
		'page arguments' => array(1),
		'page callback' => 'hvite_eventrsvp_page',
		'access arguments' => array(1),
		'access callback' => 'hvite_access',
	);
	
	/* Event view page */
	$items['hvite/eventview'] = array(
		'type' => MENU_CALLBACK,
		'title' => '',
		'page arguments' => array(1),
		'page callback' => 'hvite_eventview_page',
		'access arguments' => array(1),
		'access callback' => 'hvite_access',
	);
	
	/* Event edit page */
	$items['hvite/eventedit'] = array(
		'type' => MENU_CALLBACK,
		'title' => '',
		'page arguments' => array(1),
		'page callback' => 'hvite_eventedit_page',
		'access arguments' => array(1),
		'access callback' => 'hvite_access',
	);
	
	return $items;
}

/*
 * Form for creating an event
 */
function hvite_createevent_form(&$form_state)
{
	/* Event details */
	$form['details'] = array(
		'#type' => 'fieldset',
		'#title' => t('Event details'),
		'#tree' => TRUE,
	);
	
	/* Title */
	$form['details']['title'] = array(
		'#type' => 'textfield',
		'#title' => t('Event title'),
		'#cols' => 60,
		'#rows' => 5,
		'#description' => t('Max: 100 characters'),
	);
	
	/* Location */
	$form['details']['location'] = array(
		'#type' => 'textfield',
		'#title' => t('Event location'),
		'#cols' => 60,
		'#rows' => 5,
		'#description' => t('Max: 100 characters'),
	);
	
	/* Description */
	$form['details']['description'] = array(
		'#type' => 'textarea',
		'#title' => t('Event description'),
		'#cols' => 60,
		'#rows' => 5,
		//'#description' => t('Event description.'),
	);
	
	
	/* User list */
	$form['details']['users'] = array(
		'#type' => 'hformtools_users',
		'#title' => 'Select users to invite',
	);
	
	/* Start date and time */
	$form['details']['startdate'] = array(
		'#type' => 'date_popup', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
		'#title' => t('Start date and time'),
		'#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
		'#date_year_range' => '-3:+3', // Optional, used to set the year range (back 3 years and forward 3 years is the default).
	);
	
	/* End date and time */
	$form['details']['enddate'] = array(
		'#type' => 'date_popup', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
		'#title' => t('End date and time'),
		'#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
		'#date_year_range' => '-3:+3', // Optional, used to set the year range (back 3 years and forward 3 years is the default).
	);
	
	/* Submit button */
	$form['submit'] = array('#type' => 'submit', '#value' => t('Create event'));

	return $form;
}

function hvite_createevent_form_validate($form, &$form_state)
{
	if ($form_state['values']['details']['title'] == '')
	{
		form_set_error('title', t('You must enter a title.'));
	}
	if ($form_state['values']['details']['location']  == '')
	{
		form_set_error('location', t('You must enter a location.'));
	}
	if ($form_state['values']['details']['description'] == '')
	{
		form_set_error('description', t('You must enter a description.'));
	}
	if (!isset($form_state['values']['details']['startdate']))
	{
		form_set_error('startdate', t('You must enter a start date.'));
	}
	if (!isset($form_state['values']['details']['enddate']))
	{
		form_set_error('enddate', t('You must select an end date.'));
	}
	
	$startTimestamp = strtotime($form_state['values']['details']['startdate']);
	$endTimestamp = strtotime($form_state['values']['details']['enddate']);
	
	if ($startTimestamp > $endTimestamp)
	{
		form_set_error('enddate', t('Your event cannot end before it begins.'));
	}
}

/*
	mimemail arguments
	string - from address
	array of recipients or single string (probably)
	string subject
	string body
	
	function _hnews_send_mail($nid,$vid,$to)
	
	hformtools_users returns space delimited list of users
*/

function hvite_createevent_form_submit($form, &$form_state)
{
	global $user;
	
	$str = "Title: '" . $form_state['values']['details']['title'] . "'<br />";
	$str .= "Location: '" . $form_state['values']['details']['location'] . "'<br />";
	$str .= "Description: '" . $form_state['values']['details']['description'] . "'<br />";
	$str .= "Start date: '" . $form_state['values']['details']['startdate'] . "' (" . strtotime($form_state['values']['details']['startdate']) . ")<br />";
	$str .= "End date: '" . $form_state['values']['details']['enddate'] . "' (" . strtotime($form_state['values']['details']['enddate']) . ")<br />";
	
	/* Submit event */
	$event["owner"] = $user->uid;
	$event["title"] = $form_state['values']['details']['title'];
	$event["location"] = $form_state['values']['details']['location'];
	$event["description"] = $form_state['values']['details']['description'];
	$event["startdate"] = strtotime($form_state['values']['details']['startdate']);
	$event["enddate"] = strtotime($form_state['values']['details']['enddate']);
	
	hvite_add_event($event);
	
	drupal_set_message(t('Event created.'));
	drupal_set_message(t($str));
}

/**
 * Generates the create event page
 */
function hvite_createevent_page()
{
	return drupal_get_form('hvite_createevent_form');
}

/**
 * Shortens a string to desired length and adds an ellipsis
 **/
function shorten($str, $len)
{
	if ($len < 3) return "";
	
	if (strlen($str) > $len)
	{
		return substr($str, 0, $len - 3) . "...";
	}
	else
	{
		return $str;
	}
}

/**
 * Generates the event list page
 */
function hvite_eventlist_page()
{
	global $user;
	global $base_url;
	
	/* Get the user's events */
	$events = hvite_get_user_events($user->uid);
	
	/* Make a table of the user's events */
	$page = "<table>";
	$page .= "<th>Title</th><th>Start date</th><th>End date</th><th>Location</th><th>Description</th><th>Status</th>";
	
	foreach ($events as $e)
	{
		$page .= sprintf("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td><a href=\"{$base_url}/hvite/eventview?id=%d\">View</a></td><td><a href=\"#\">Edit</a></td></tr>",
			t($e["title"]),
			t(date("m/d/y H:m:s", $e["startdate"])),
			t(date("m/d/y H:m:s", $e["enddate"])),
			t($e["location"]),
			t(shorten($e["description"], 35)),
			t(($e["old"]) ? "Old" : "New"),
			$e["id"]);
	}
	
	$page .= "</table>";
	return $page;
}

/**
 * Generates the single event view page
 */
function hvite_eventview_page()
{
	global $user;
	
	$eventid = intval($_GET["id"]);
	
	if (($e = hvite_get_event_details($eventid)) != false)
	{
		if ($e["owner"] == $user->uid)
		{
			$page = "<h1>" . t($e["title"]) . "</h1>";
			$page .= "<p><h3>Location: " . t($e["location"]) . "</h3>";
			$page .= "<h3>Date/time: " . t(date("m/d/y H:m:s", $e["startdate"])) . " to " . t(date("m/d/y H:m:s", $e["enddate"])) . "</h3></p>";
			
			$page .= "<p>" . t($e["description"]) . "</p>";
			return $page;
		}
		else
		{
			return drupal_access_denied();
		}
	}
	else
	{
		return drupal_not_found();
	}
}

/**
 * Generates the single event edit page
 */
function hvite_eventedit_page()
{
	return "EDIT";
}

/**
 * Generates the single event RSVP page
 */
function hvite_eventrsvp_page()
{
	return "RSVP";
}

/**
 * Returns a list of all of the users' events in the form of an associative array
 */
function hvite_get_user_events($uid)
{
	$q =
	"SELECT
		id id,
		owner owner,
		startdate startdate,
		enddate enddate,
		location location,
		title title,
		description description
	FROM {hvite_events}
	WHERE owner = %d
	ORDER BY enddate DESC";
	
	$rs = db_query($q, $uid);
	
	$time = time();
	
	while ($row = db_fetch_array($rs))
	{
		$row["old"] = $time > $row["enddate"];
		
		$arry[] = $row;
	}

	if (isset($arry))
	{
		return $arry;
	}
	else
	{
		return array();
	}
}

/**
 * Returns the details of a specific event in the form of an associative array
 */
function hvite_get_event_details($eventid)
{
	$q =
	"SELECT
		id id,
		owner owner,
		startdate startdate,
		enddate enddate,
		location location,
		title title,
		description description
	FROM {hvite_events}
	WHERE id = %d
	LIMIT 1";
	
	$rs = db_query($q, $eventid);
	$row = db_fetch_array($rs);
	
	$time = time();
	
	if (isset($row))
	{
		$row["old"] = $time > $row["enddate"];
		return $row;
	}
	else
	{
		return false;
	}
}

/**
 * Adds an event to the database
 */
function hvite_add_event($event)
{
	$q = "INSERT INTO {hvite_events}
	(owner, startdate, enddate, location, title, description)
	VALUES(%d, %d, %d, '%s', '%s', '%s')";
	
	$rs = db_query($q,
		$event["owner"], $event["startdate"], $event["enddate"],
		$event["location"], $event["title"], $event["description"]);
   
	if($rs && db_affected_rows() == 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

/**
 * Implements hook_perm
 * 
 * Just returns an array of strings to be used on the permissions page
 */
function hvite_perm()
{
	return array('make hVite events', 'RSVP to hVite events');
}

/*----------------Access Callbacks------------------*/
function hvite_access($account)
{
    if (user_access('make hVite events'))
	{
        return TRUE;
    }
	
	return FALSE;
}
