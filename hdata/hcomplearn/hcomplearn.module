<?php

/**
 * @file hcomplearn.module
 *
 * This file must be located in the hcomplearn folder and is loaded on every
 * page.
 */

/*
 * Function to return the length of time for which drafts should be stored.
 *
 * Even though right now it is a constant, it could eventually be a
 * setting in the future.
 */
function hcomplearn_timetosave(){return '6 months';}
/*
 * Another constant function
 */
function hcomplearn_minhours(){return 20;}

/**
 * Implements hook_menu
 *
 * hook_menu is called by drupal whenever a module is enabled or disabled
 * to update the internal page registry.
 *
 * Note that every page has a built-in permissions callback ("access callback")
 * that determines if (1) it should be shown in menus and (2) if a user
 * can visit it (throws a 403 on false)
 */
function hcomplearn_menu(){

    //TODO: write docs

    //AJAX callback
    $items['hcomplearn/submission/%'] = array(
        'title' => 'CL submission',
        'page callback' => 'hcomplearn_cl_submission',
        'page arguments' => array(2),
        'type' => MENU_CALLBACK,
        //'file' => 'includes/hstatus.ajax.inc',
        'access callback' => '_hcomplearn_cl_review_access',
        'access arguments' => array('view'),
    );

    //complearning form
    //note that even though no % is in the path, anything postfixing
    //the path gets passed as an argument
    $items['hcomplearn/submitcl'] = array(
        'title' => 'Comp Learning Form',
        'page callback' => 'hcomplearn_build_clform',
        'file' => 'hcomplearn.form.inc',
        'access callback' => '_hcomplearn_form_cl_access',
    );
    return $items;
}

/**
 * hcomplearn_cl_submission is an AJAX callback function to generate
 * HTML from complearning submission data.
 *
 * The design intent of this function was that it would be used to
 * return HTML to an AJAX lightbox embedded in a general complearning
 * reviewing page.  As such, it does not display general information
 * such as username, total hours, or time submitted.  It merely gets the
 * submission data and themes it with the theme hook "hcomplearn_cl_activity"
 */
function hcomplearn_cl_submission($sid){
    $complearning = hdata_cl_load($sid);
    $data = $complearning['data'];
    $output = '';
    if($data){
        for($i = 1; $i <= $data['count']; $i++){
            if($data[$i]['name'] == ''){
                $data[$i]['name'] = "Activity $i";
            }
            $output .= theme('hcomplearn_cl_activity',$data[$i]);
        }
    }else{
        $output = '<h1>Not Found</h1>';
    }

    //AJAX functions should echo the output and return null to prevent
    //the theme system from kicking in.
    echo $output;
    return null;
}

/**
 * Implements hook_perm
 *
 * Just returns an array of strings to be used on the permissions page
 */
function hcomplearn_perm(){
    return array('administer complementary learning',
        'submit complementary learning', 'review complementary learning');
}

/**
 * Implements hook_theme
 *
 * hook_theme defines "theme hooks" which are just functions or files that
 * generate HTML.  The benefit of doing this is that it makes it easy for
 * other modules or themes to override your display.
 */
function hcomplearn_theme($existing, $type, $theme, $path){
    return array(
        'hcomplearn_cl_activity' => array(
            'arguments' => array('activity' => NULL),
            'template' => 'clactivity',
        ),
    );
}

/**
 * Implements hook_action_info
 */
function hcomplearn_action_info(){
    return array(
        'hcomplearn_approve_cl_action' => array(
            'description' => t('Approve Comp Learning Submission'),
            'type' => 'complearning',
            'configurable' => FALSE,
        ),
        'hcomplearn_reject_cl_action' => array(
            'description' => t('Reject Comp Learning Submission'),
            'type' => 'complearning',
            'configurable' => FALSE,
        ),
    /* Example action -- taken from Drupal
      'user_block_ip_action' => array(
      'description' => t('Ban IP address of current user'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('presave', 'delete', 'insert', 'update', 'view'),
        'comment' => array('view', 'insert', 'update', 'delete'),
        'user' => array('logout'),
      )
    ),*/
  );
}

//TODO: add permissions checks for approve and reject

function hcomplearn_approve_cl_action($submission){
    $id = $submission['id'];
    db_query('UPDATE {h_cl} SET status=1 WHERE id=%d',$id);
}
function hcomplearn_reject_cl_action($submission){
    $id = $submission['id'];
    db_query('UPDATE {h_cl} SET status=2 WHERE id=%d',$id);
}

/*
 * Implements hook_views_bulk_operations_object_info
 */
function hcomplearn_views_bulk_operations_object_info(){
    return array(
        'complearning' => array(
            'type' => 'complearning',
            'base_table' => 'h_cl',
            'load' => 'hdata_cl_load',
            'oid' => 'id',
            'title' => 'id',
            'access' => '_hcomplearn_cl_review_access',
        ),
    );
}

/**
 * Implements hook_views_api
 */
function hcomplearn_views_api(){
    return array('api'=>2);
}

/*----------------Access Callbacks------------------*/


/*
 * for when you just need to signify unlimited access
 */
function _hcomplearn_static_access(){ return true; }

/*
 * _hcomplearn_form_cl_access
 */
function _hcomplearn_form_cl_access(){
    global $user;
    if(user_access('submit complementary learning')){
        return hdata_user_is_active_student(array('uid' => $user->uid));
    }else{
        return false;
    }
}

function _hcomplearn_cl_review_access($op,$submission=null,$account=null){
    if(is_numeric($op)){
        $account = user_load($op);
    }
    if (empty($account)) {
        $account = $GLOBALS['user'];
    }
    return $account->uid == 1 || user_access('review complementary learning',$account) ||
            user_access('administer honors status',$account);
}
